from fastapi import FastAPI, Request, UploadFile, File, Form
from fastapi.middleware.cors import CORSMiddleware
import os
import shutil
import google.generativeai as genai

app = FastAPI()

# CORS ƒë·ªÉ cho frontend g·ªçi API
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# --- C·∫•u h√¨nh Gemini ---
api_key = os.getenv("GEMINI_API_KEY")
if not api_key:
    raise RuntimeError("‚ùå GEMINI_API_KEY ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh trong bi·∫øn m√¥i tr∆∞·ªùng!")

genai.configure(api_key=api_key)

# Models
model_pro = genai.GenerativeModel("gemini-1.5-pro")
model_flash = genai.GenerativeModel("gemini-1.5-flash")

# B·ªô nh·ªõ t·∫°m
appointments = []
conversations = {}

UPLOAD_DIR = "uploads"
os.makedirs(UPLOAD_DIR, exist_ok=True)


@app.post("/api/message")
async def message(req: Request):
    """Nh·∫≠n tin nh·∫Øn t·ª´ frontend, g·ªçi Gemini ƒë·ªÉ tr·∫£ l·ªùi"""
    data = await req.json()
    user = data.get("username")
    msg = data.get("message")

    if not user or not msg:
        return {"reply": "‚ö†Ô∏è Thi·∫øu th√¥ng tin username ho·∫∑c message."}

    if user not in conversations:
        conversations[user] = [
            {"role": "system", "content": "B·∫°n l√† m·ªôt tr·ª£ l√≠ y t·∫ø h·ªØu √≠ch."}
        ]

    conversations[user].append({"role": "user", "content": msg})

    history_text = ""
    for m in conversations[user]:
        role = "Ng∆∞·ªùi d√πng" if m["role"] == "user" else "Tr·ª£ l√Ω"
        history_text += f"{role}: {m['content']}\n"

    try:
        response = model_pro.generate_content(history_text)
        reply = response.text
    except Exception as e:
        if "429" in str(e):  # h·∫øt quota ‚Üí fallback
            try:
                response = model_flash.generate_content(history_text)
                reply = response.text
            except Exception as e2:
                reply = f"L·ªói g·ªçi Gemini Flash API: {e2}"
        else:
            reply = f"L·ªói g·ªçi Gemini Pro API: {e}"

    conversations[user].append({"role": "assistant", "content": reply})
    return {"reply": reply}


@app.post("/api/upload")
async def upload_file(user: str = Form(...), file: UploadFile = File(...)):
    """Nh·∫≠n file t·ª´ ng∆∞·ªùi d√πng v√† l∆∞u v√†o th∆∞ m·ª•c uploads/"""
    try:
        file_path = os.path.join(UPLOAD_DIR, file.filename)
        with open(file_path, "wb") as buffer:
            shutil.copyfileobj(file.file, buffer)

        reply = f"üìé File '{file.filename}' ƒë√£ ƒë∆∞·ª£c t·∫£i l√™n th√†nh c√¥ng."

        # N·∫øu l√† ·∫£nh ‚Üí g·ª£i √Ω ph√¢n t√≠ch
        if file.content_type.startswith("image/"):
            reply += " ƒê√¢y l√† ·∫£nh, b·∫°n c√≥ mu·ªën t√¥i ph√¢n t√≠ch n·ªôi dung ·∫£nh kh√¥ng?"

        # N·∫øu l√† text ‚Üí t√≥m t·∫Øt n·ªôi dung
        elif file.content_type.startswith("text/"):
            with open(file_path, "r", encoding="utf-8", errors="ignore") as f:
                content = f.read(500)
            ai_resp = model_flash.generate_content(
                f"ƒê√¢y l√† n·ªôi dung file:\n{content}\n\nH√£y t√≥m t·∫Øt ng·∫Øn g·ªçn cho b·ªánh nh√¢n."
            )
            reply += "\nüìù T√≥m t·∫Øt: " + ai_resp.text

        return {"reply": reply}
    except Exception as e:
        return {"reply": f"‚ùå L·ªói upload file: {e}"}


@app.get("/api/appointments")
async def get_appts(user: str):
    """Tr·∫£ v·ªÅ danh s√°ch l·ªãch h·∫πn c·ªßa 1 user"""
    user_appts = [a for a in appointments if a["user"] == user]
    return {"appointments": user_appts}


@app.post("/api/book")
async def book(req: Request):
    """ƒê·∫∑t l·ªãch h·∫πn m·ªõi"""
    data = await req.json()
    appt = {
        "user": data["user"],
        "clinic": data["clinic"],
        "date": data["date"],
        "time": data["time"],
    }
    appointments.append(appt)
    return {"message": "ƒê·∫∑t l·ªãch th√†nh c√¥ng", "appointment": appt}
