from fastapi import FastAPI, Request, UploadFile, File, Form
from fastapi.middleware.cors import CORSMiddleware
import google.generativeai as genai
import shutil
import os

app = FastAPI()

# Cho ph√©p CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# C·∫•u h√¨nh Gemini
genai.configure(api_key=os.getenv("GEMINI_API_KEY", "AIza..."))  # thay API key

appointments = []
conversations = {}

@app.post("/api/message")
async def message(req: Request):
    data = await req.json()
    user = data.get("username")
    msg = data.get("message")

    if user not in conversations:
        conversations[user] = [
            {"role": "system", "content": "B·∫°n l√† m·ªôt tr·ª£ l√≠ y t·∫ø h·ªØu √≠ch."}
        ]
    conversations[user].append({"role": "user", "content": msg})

    try:
        model = genai.GenerativeModel("gemini-1.5-pro")
        chat = model.start_chat(history=conversations[user])
        response = chat.send_message(msg)
        reply = response.text
        conversations[user].append({"role": "assistant", "content": reply})
    except Exception as e:
        reply = f"L·ªói g·ªçi Gemini API: {e}"

    return {"reply": reply}


@app.post("/api/upload")
async def upload(user: str = Form(...), file: UploadFile = File(...)):
    try:
        # L∆∞u file t·∫°m
        file_path = f"temp_{file.filename}"
        with open(file_path, "wb") as buffer:
            shutil.copyfileobj(file.file, buffer)

        # X·ª≠ l√Ω b·∫±ng Gemini (n·∫øu l√† ·∫£nh th√¨ g·ª≠i v√†o vision model)
        if file.content_type.startswith("image/"):
            model = genai.GenerativeModel("gemini-1.5-flash")
            response = model.generate_content([
                {"mime_type": file.content_type, "data": open(file_path, "rb").read()},
                "H√£y ph√¢n t√≠ch h√¨nh ·∫£nh n√†y li√™n quan ƒë·∫øn y t·∫ø."
            ])
            reply = response.text
        else:
            reply = f"üìé T·ªáp {file.filename} ƒë√£ ƒë∆∞·ª£c t·∫£i l√™n th√†nh c√¥ng."

        os.remove(file_path)
    except Exception as e:
        reply = f"L·ªói x·ª≠ l√Ω file: {e}"

    return {"reply": reply}


@app.get("/api/appointments")
async def get_appts(user: str):
    user_appts = [a for a in appointments if a["user"] == user]
    return {"appointments": user_appts}


@app.post("/api/book")
async def book(req: Request):
    data = await req.json()
    appt = {
        "user": data["user"],
        "clinic": data["clinic"],
        "date": data["date"],
        "time": data["time"],
    }
    appointments.append(appt)
    return {"message": "ƒê·∫∑t l·ªãch th√†nh c√¥ng", "appointment": appt}
